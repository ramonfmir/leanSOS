import to_mathlib.matrix float.basic lib.psd 

-- We have A ‚àà ùíÆ(ùîΩ)‚ÅøÀ£‚Åø. 

open matrix
open_locale matrix

variables (n : nat) (A : matrix (fin n) (fin n) float) (h : symmetric A)

theorem psd_of_ldlt 
  (L : matrix (fin n) (fin n) float)
  (hL : symmetric L)
  (D : fin n ‚Üí float)
  (hD : 0 ‚â§ D)
  (hij : ‚àÄ i j, i ‚â† j ‚Üí (L·µÄ ‚¨ù diagonal D ‚¨ù L) i j = A i j)
  (hii : ‚àÄ i, 0 ‚â§ (A - (L·µÄ ‚¨ù diagonal D ‚¨ù L)) i i) 
: pos_semidef A h :=
begin 
  have hLDLTpsd := 
    pos_semidef_of_LDLT_decomposition (L·µÄ ‚¨ù diagonal D ‚¨ù L) (symmetric_LDLT L hL D) ‚ü®L, D, ‚ü®rfl, hD‚ü©‚ü©,
  have hDnn : (0 : fin n ‚Üí float) ‚â§ (Œª i, (A - L·µÄ ‚¨ù diagonal D ‚¨ù L) i i),
  { rw pi.le_def, intros i, exact hii i, },
  have hdA : (A - L·µÄ ‚¨ù diagonal D ‚¨ù L) = diagonal (Œª i, (A - L·µÄ ‚¨ù diagonal D ‚¨ù L) i i),
  { ext i j, by_cases (i = j),
    { rw h, simp [diagonal], },
    { have hijij := (hij i j h).symm, rw ‚Üêsub_eq_zero at hijij, 
      rw [diagonal_apply_ne h, ‚Üêhijij], simp, }, },
  have hdApsd : pos_semidef (A - L·µÄ ‚¨ù diagonal D ‚¨ù L) sorry,
  { sorry, },
  have hA : A = L·µÄ ‚¨ù diagonal D ‚¨ù L + (A - L·µÄ ‚¨ù diagonal D ‚¨ù L),
  { simp, },
  sorry,
  --exact pos_semidef_sum 
end
